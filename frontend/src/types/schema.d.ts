/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/greenhouses/": {
    get: operations["listGreenhouses"];
    post: operations["createGreenhouse"];
  };
  "/api/greenhouses/my_greenhouses/": {
    get: operations["myGreenhousesGreenhouse"];
  };
  "/api/greenhouses/{id}/": {
    get: operations["retrieveGreenhouse"];
    put: operations["updateGreenhouse"];
    delete: operations["destroyGreenhouse"];
    patch: operations["partialUpdateGreenhouse"];
  };
  "/api/greenhouses/{id}/get_timesheets/": {
    get: operations["getTimesheetsGreenhouse"];
  };
  "/api/flowerbeds/": {
    get: operations["listFlowerbeds"];
    post: operations["createFlowerbed"];
  };
  "/api/flowerbeds/my_flowerbeds/": {
    get: operations["myFlowerbedsFlowerbed"];
  };
  "/api/flowerbeds/{id}/": {
    get: operations["retrieveFlowerbed"];
    put: operations["updateFlowerbed"];
    delete: operations["destroyFlowerbed"];
    patch: operations["partialUpdateFlowerbed"];
  };
  "/api/flowerbeds/{id}/status/": {
    get: operations["statusFlowerbed"];
  };
  "/api/orders/": {
    get: operations["listOrders"];
    post: operations["createOrder"];
  };
  "/api/orders/{id}/": {
    get: operations["retrieveOrder"];
    put: operations["updateOrder"];
    delete: operations["destroyOrder"];
    patch: operations["partialUpdateOrder"];
  };
  "/api/orders/{id}/get_payment/": {
    get: operations["getPaymentOrder"];
  };
  "/api/orders/{id}/get_pickup/": {
    get: operations["getPickupOrder"];
  };
  "/api/users/": {
    /** @description API endpoint that allows users to be viewed or edited. */
    get: operations["listUsers"];
  };
  "/api/users/{id}/": {
    /** @description API endpoint that allows users to be viewed or edited. */
    get: operations["retrieveUser"];
  };
  "/api/timesheets/": {
    get: operations["listTimesheets"];
    post: operations["createTimesheet"];
  };
  "/api/timesheets/{id}/": {
    get: operations["retrieveTimesheet"];
    put: operations["updateTimesheet"];
    delete: operations["destroyTimesheet"];
    patch: operations["partialUpdateTimesheet"];
  };
  "/api/auth/profile": {
    get: operations["listUsers"];
  };
  "/api/marketplace/products/": {
    get: operations["listProducts"];
    post: operations["createProduct"];
  };
  "/api/marketplace/products/{id}/": {
    get: operations["retrieveProduct"];
    put: operations["updateProduct"];
    delete: operations["destroyProduct"];
    patch: operations["partialUpdateProduct"];
  };
  "/api/marketplace/products/{id}/listings/": {
    get: operations["listingsProduct"];
  };
  "/api/marketplace/products/{id}/minmax/": {
    get: operations["minmaxProduct"];
  };
  "/api/marketplace/shared-products/": {
    get: operations["listSharedProducts"];
    post: operations["createSharedProduct"];
  };
  "/api/marketplace/shared-products/{id}/": {
    get: operations["retrieveSharedProduct"];
    put: operations["updateSharedProduct"];
    delete: operations["destroySharedProduct"];
    patch: operations["partialUpdateSharedProduct"];
  };
  "/api/marketplace/greenhouses/{id}/products/": {
    get: operations["listMarketplaceProducts"];
  };
  "/api/marketplace/product/{id}/": {
    get: operations["retrieveMarketplaceProduct"];
  };
  "/api/newsletter/gallery/": {
    get: operations["listNewsletterImages"];
    post: operations["createNewsletterImage"];
  };
  "/api/newsletter/gallery/{id}/": {
    get: operations["retrieveNewsletterImage"];
    put: operations["updateNewsletterImage"];
    delete: operations["destroyNewsletterImage"];
    patch: operations["partialUpdateNewsletterImage"];
  };
  "/api/newsletter/unsubscribe/": {
    get: operations["listUnsubscribes"];
  };
  "/api/newsletter/subscriber-count/": {
    get: operations["listSubscriberCounts"];
  };
  "/api/greenhouses/create_greenhouse/": {
    post: operations["createGreenhouseGreenhouse"];
  };
  "/api/flowerbeds/{id}/rent/": {
    post: operations["rentFlowerbed"];
  };
  "/api/users/{id}/edit/": {
    /** @description API endpoint that allows users to be viewed or edited. */
    post: operations["editUser"];
  };
  "/api/users/{id}/set_activity/": {
    /** @description API endpoint that allows users to be viewed or edited. */
    post: operations["setActivityUser"];
  };
  "/api/timesheets/create_timesheet/": {
    post: operations["createTimesheetTimesheet"];
  };
  "/api/password-reset/validate_token/": {
    /** @description An Api ViewSet which provides a method to verify that a token is valid */
    post: operations["createResetToken"];
  };
  "/api/password-reset/confirm/": {
    /** @description An Api ViewSet which provides a method to reset a password based on a unique token */
    post: operations["createPasswordToken"];
  };
  "/api/password-reset/": {
    /**
     * @description An Api ViewSet which provides a method to request a password reset token based on an e-mail address
     *
     * Sends a signal reset_password_token_created when a reset token was created
     */
    post: operations["createEmail"];
  };
  "/api/auth/login": {
    post: operations["createLogin"];
  };
  "/api/auth/register": {
    post: operations["createRegister"];
  };
  "/api/auth/logout": {
    post: operations["createLogout"];
  };
  "/api/password_reset/validate_token/": {
    /** @description An Api View which provides a method to verify that a token is valid */
    post: operations["createResetToken"];
  };
  "/api/password_reset/confirm/": {
    /** @description An Api View which provides a method to reset a password based on a unique token */
    post: operations["createPasswordToken"];
  };
  "/api/password_reset/": {
    /**
     * @description An Api View which provides a method to request a password reset token based on an e-mail address
     *
     * Sends a signal reset_password_token_created when a reset token was created
     */
    post: operations["createEmail"];
  };
  "/api/marketplace/greenhouses/{id}/products/from-shared/": {
    post: operations["createMarketplaceProduct"];
  };
  "/api/marketplace/greenhouses/{id}/products/from-custom/": {
    post: operations["createMarketplaceProduct"];
  };
  "/api/marketplace/order/": {
    post: operations["createProductOrders"];
  };
  "/api/marketplace/pickup-options/": {
    post: operations["createGetPickupOptionsFromCartItems"];
  };
  "/api/marketplace/set-primary-greenhouse/": {
    post: operations["createSetPrimaryGreenhouse"];
  };
  "/api/newsletter/send-newsletter/": {
    post: operations["createSendNewsletter"];
  };
  "/api/greenhouses/{id}/edit_greenhouse/": {
    put: operations["editGreenhouseGreenhouse"];
  };
  "/api/greenhouses/{id}/set_caretaker/": {
    put: operations["setCaretakerGreenhouse"];
  };
  "/api/greenhouses/{id}/set_owner/": {
    put: operations["setOwnerGreenhouse"];
  };
  "/api/greenhouses/{id}/unset_caretaker/": {
    put: operations["unsetCaretakerGreenhouse"];
  };
  "/api/greenhouses/{id}/unset_owner/": {
    put: operations["unsetOwnerGreenhouse"];
  };
  "/api/flowerbeds/{id}/extend_rent/": {
    put: operations["extendRentFlowerbed"];
  };
  "/api/orders/{id}/cancel_order/": {
    put: operations["cancelOrderOrder"];
  };
  "/api/orders/{id}/edit_order/": {
    put: operations["editOrderOrder"];
  };
  "/api/timesheets/{id}/update_timesheet/": {
    put: operations["updateTimesheetTimesheet"];
  };
  "/api/marketplace/marketplace-products/{id}/": {
    put: operations["updateMarketplaceProduct"];
    patch: operations["partialUpdateMarketplaceProduct"];
  };
  "/api/marketplace/greenhouses/{id}/products/edit/": {
    put: operations["updateEditGreenhouseProductInventory"];
  };
  "/api/marketplace/marketplace-products/{id}/delete/": {
    delete: operations["destroyMarketplaceProduct"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Greenhouse: {
      id?: number;
      greenhouse_address: {
        id?: number;
        country?: string | null;
        state?: string | null;
        city?: string | null;
        city_part?: string | null;
        street?: string | null;
        zipcode?: string | null;
        latitude?: string | null;
        longitude?: string | null;
      };
      flowerbeds?: readonly ({
          id?: number;
          rents?: readonly ({
              id?: number;
              /** Format: date-time */
              rented_from?: string | null;
              /** Format: date-time */
              rented_to?: string | null;
              flowerbed?: number | null;
              user?: number | null;
            })[];
          currentRent?: string;
          greenhouse: {
            id?: number;
            title?: string | null;
            description?: string | null;
            greenhouse_address: {
              id?: number;
              country?: string | null;
              state?: string | null;
              city?: string | null;
              city_part?: string | null;
              street?: string | null;
              zipcode?: string | null;
              latitude?: string | null;
              longitude?: string | null;
            };
          };
          extendable?: string;
          name?: string | null;
          disabled?: boolean | null;
          dimension_width?: number;
          dimension_height?: number;
          idealPlants?: string | null;
          tools?: string | null;
          /** Format: decimal */
          pricePerDay?: string;
        })[];
      greenhouse_business_hours: ({
          id?: number;
          greenhouse_business_hour_periods: ({
              id?: number;
              open: string;
              close: string;
              business_hour?: number | null;
            })[];
          day: number;
          greenhouse?: number | null;
        })[];
      available_flowerbeds?: string;
      title?: string | null;
      description?: string | null;
      rules?: string | null;
      published?: boolean;
      bank_account_number?: string | null;
      owner?: number | null;
      caretaker?: number | null;
    };
    Timesheet: {
      id?: number;
      items: ({
          id?: number;
          title?: string | null;
          description?: string | null;
          timesheet?: number | null;
          timesheet_update?: number | null;
        })[];
      title?: string | null;
      description?: string | null;
      /** Format: decimal */
      pay?: string | null;
      status?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      greenhouse?: number | null;
      author?: number | null;
    };
    Flowerbed: {
      id?: number;
      rents?: readonly ({
          id?: number;
          /** Format: date-time */
          rented_from?: string | null;
          /** Format: date-time */
          rented_to?: string | null;
          flowerbed?: number | null;
          user?: number | null;
        })[];
      currentRent?: string;
      greenhouse: {
        id?: number;
        title?: string | null;
        description?: string | null;
        greenhouse_address: {
          id?: number;
          country?: string | null;
          state?: string | null;
          city?: string | null;
          city_part?: string | null;
          street?: string | null;
          zipcode?: string | null;
          latitude?: string | null;
          longitude?: string | null;
        };
      };
      extendable?: string;
      name?: string | null;
      disabled?: boolean | null;
      dimension_width?: number;
      dimension_height?: number;
      idealPlants?: string | null;
      tools?: string | null;
      /** Format: decimal */
      pricePerDay?: string;
    };
    FlowerbedStatus: {
      /** @enum {string} */
      status: "rented" | "free";
    };
    Order: {
      id?: number;
      type?: string;
      status?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: decimal */
      final_price?: string | null;
      user?: number | null;
      discounts?: number[];
    };
    Payment: {
      receiver: string;
      vs: number;
      /** Format: decimal */
      amount: string;
    };
    GetPickupLocations: {
      greenhouse: {
        id?: number;
        greenhouse_business_hours: ({
            id?: number;
            greenhouse_business_hour_periods: ({
                id?: number;
                open: string;
                close: string;
                business_hour?: number | null;
              })[];
            day: number;
            greenhouse?: number | null;
          })[];
        greenhouse_address: {
          id?: number;
          country?: string | null;
          state?: string | null;
          city?: string | null;
          city_part?: string | null;
          street?: string | null;
          zipcode?: string | null;
          latitude?: string | null;
          longitude?: string | null;
        };
        title?: string | null;
        description?: string | null;
        rules?: string | null;
        published?: boolean;
        bank_account_number?: string | null;
        owner?: number | null;
        caretaker?: number | null;
      };
      items: ({
          id?: number;
          productOrder: number;
          quantity?: number | null;
          /** Format: decimal */
          price?: string | null;
          greenhouseName?: string | null;
          greenhouseId?: number | null;
          productName?: string | null;
          productImage?: string | null;
          productId?: number | null;
        })[];
    };
    UserDetailed: {
      first_name?: string;
      last_name?: string;
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      /** Format: email */
      email?: string;
      groups?: readonly string[];
      profile?: {
        readonly id?: number;
        readonly primary_greenhouseId?: number | null;
        readonly receive_newsletter?: boolean;
        readonly user: number;
      };
      owned_greenhouses?: string;
      caretaker_greenhouses?: string;
      orders?: string;
      superuser?: string;
      /** @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
      is_active?: boolean;
    };
    TimesheetWithGreenhouse: {
      id?: number;
      items: ({
          id?: number;
          title?: string | null;
          description?: string | null;
          timesheet?: number | null;
          timesheet_update?: number | null;
        })[];
      greenhouse: {
        id?: number;
        greenhouse_address: {
          id?: number;
          country?: string | null;
          state?: string | null;
          city?: string | null;
          city_part?: string | null;
          street?: string | null;
          zipcode?: string | null;
          latitude?: string | null;
          longitude?: string | null;
        };
        flowerbeds?: readonly ({
            id?: number;
            rents?: readonly ({
                id?: number;
                /** Format: date-time */
                rented_from?: string | null;
                /** Format: date-time */
                rented_to?: string | null;
                flowerbed?: number | null;
                user?: number | null;
              })[];
            currentRent?: string;
            greenhouse: {
              id?: number;
              title?: string | null;
              description?: string | null;
              greenhouse_address: {
                id?: number;
                country?: string | null;
                state?: string | null;
                city?: string | null;
                city_part?: string | null;
                street?: string | null;
                zipcode?: string | null;
                latitude?: string | null;
                longitude?: string | null;
              };
            };
            extendable?: string;
            name?: string | null;
            disabled?: boolean | null;
            dimension_width?: number;
            dimension_height?: number;
            idealPlants?: string | null;
            tools?: string | null;
            /** Format: decimal */
            pricePerDay?: string;
          })[];
        greenhouse_business_hours: ({
            id?: number;
            greenhouse_business_hour_periods: ({
                id?: number;
                open: string;
                close: string;
                business_hour?: number | null;
              })[];
            day: number;
            greenhouse?: number | null;
          })[];
        available_flowerbeds?: string;
        title?: string | null;
        description?: string | null;
        rules?: string | null;
        published?: boolean;
        bank_account_number?: string | null;
        owner?: number | null;
        caretaker?: number | null;
      };
      working_hours: ({
          id?: number;
          /** Format: date-time */
          start?: string | null;
          /** Format: date-time */
          end?: string | null;
          timesheet?: number | null;
          timesheet_update?: number | null;
        })[];
      updates: ({
          id?: number;
          items: ({
              id?: number;
              title?: string | null;
              description?: string | null;
              timesheet?: number | null;
              timesheet_update?: number | null;
            })[];
          working_hours: ({
              id?: number;
              /** Format: date-time */
              start?: string | null;
              /** Format: date-time */
              end?: string | null;
              timesheet?: number | null;
              timesheet_update?: number | null;
            })[];
          author: {
            id?: number;
            user?: string;
          };
          message?: string | null;
          description?: string | null;
          /** Format: decimal */
          pay?: string | null;
          status?: string | null;
          /** Format: date-time */
          created_at?: string;
          /** Format: date-time */
          updated_at?: string;
          timesheet?: number | null;
        })[];
      author: {
        id?: number;
        user?: string;
      };
      title?: string | null;
      description?: string | null;
      /** Format: decimal */
      pay?: string | null;
      status?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    Product: {
      id?: number;
      name?: string;
      description?: string | null;
      image?: string | null;
      shared?: boolean;
    };
    ProductDetailMarketplaceProduct: {
      id?: number;
      greenhouse: {
        id?: number;
        title?: string | null;
        description?: string | null;
        rules?: string | null;
        published?: boolean;
        bank_account_number?: string | null;
        owner?: number | null;
        greenhouse_address?: number | null;
        caretaker?: number | null;
      };
      /** Format: decimal */
      price: string;
      quantity: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      product?: number | null;
    };
    ProductMinMax: {
      id: number;
      name: string;
      description: string;
      image: string;
      min: number;
      max: number;
      totalQuantity: number;
      totalGreenhouses: number;
    };
    SharedProduct: {
      id?: number;
      name?: string;
      description?: string | null;
      image?: string | null;
      shared?: boolean;
    };
    MarketplaceProduct: {
      id?: number;
      product: {
        id?: number;
        name?: string;
        description?: string | null;
        image?: string | null;
        shared?: boolean;
      };
      /** Format: decimal */
      price: string;
      quantity: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      greenhouse?: number | null;
    };
    MarketplaceDetailProduct: {
      id?: number;
      product: {
        id?: number;
        name?: string;
        description?: string | null;
        image?: string | null;
        shared?: boolean;
      };
      greenhouse: {
        id?: number;
        title?: string | null;
        description?: string | null;
        rules?: string | null;
        published?: boolean;
        bank_account_number?: string | null;
        owner?: number | null;
        greenhouse_address?: number | null;
        caretaker?: number | null;
      };
      /** Format: decimal */
      price: string;
      quantity: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    NewsletterImage: {
      /** Format: binary */
      image?: string;
    };
    CreateGreenhouse: {
      title: string | null;
      description: string | null;
      published: boolean;
      greenhouse_address?: {
        id?: number;
        country?: string | null;
        state?: string | null;
        city?: string | null;
        city_part?: string | null;
        street?: string | null;
        zipcode?: string | null;
        latitude?: string | null;
        longitude?: string | null;
      };
      greenhouse_business_hours?: ({
          id?: number;
          greenhouse_business_hour_periods: ({
              id?: number;
              open: string;
              close: string;
              business_hour?: number | null;
            })[];
          day: number;
          greenhouse?: number | null;
        })[];
    };
    CreateRent: {
      /** Format: date-time */
      rented_from: string | null;
      /** Format: date-time */
      rented_to: string | null;
    };
    EditUser: {
      first_name?: string;
      last_name?: string;
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      /** Format: email */
      email?: string;
    };
    SetUserActivity: {
      /** @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
      is_active?: boolean;
    };
    CreateTimesheet: {
      items: ({
          id?: number;
          title?: string | null;
          description?: string | null;
          timesheet?: number | null;
          timesheet_update?: number | null;
        })[];
      greenhouse: number;
      working_hours: ({
          id?: number;
          /** Format: date-time */
          start?: string | null;
          /** Format: date-time */
          end?: string | null;
          timesheet?: number | null;
          timesheet_update?: number | null;
        })[];
      title?: string | null;
      description?: string | null;
      /** Format: decimal */
      pay?: string | null;
      status?: string | null;
    };
    ResetToken: {
      token: string;
    };
    PasswordToken: {
      password: string;
      token: string;
    };
    Email: {
      /** Format: email */
      email: string;
    };
    CreateGreenhouseProductFromSharedProduct: {
      product: number;
      /** Format: decimal */
      price: string;
      quantity: number;
    };
    CreateGreenhouseProductFromCustomProduct: {
      product: {
        id?: number;
        name?: string;
        description?: string | null;
        image?: string | null;
        shared?: boolean;
      };
      /** Format: decimal */
      price: string;
      quantity: number;
    };
    CreateProductOrderInput: {
      items: {
          marketplaceProduct: number;
          quantity: number;
        }[];
    };
    EditGreenhouse: {
      id?: number;
      title: string | null;
      description: string | null;
      published: boolean;
      greenhouse_address?: {
        id?: number;
        country?: string | null;
        state?: string | null;
        city?: string | null;
        city_part?: string | null;
        street?: string | null;
        zipcode?: string | null;
        latitude?: string | null;
        longitude?: string | null;
      };
      greenhouse_business_hours?: ({
          id?: number;
          greenhouse_business_hour_periods: ({
              id?: number;
              open: string;
              close: string;
              business_hour?: number | null;
            })[];
          day: number;
          greenhouse?: number | null;
        })[];
    };
    SetCaretaker: {
      caretaker: number;
    };
    SetOwner: {
      owner: number;
    };
    Empty: Record<string, never>;
    EditOrder: {
      status?: string | null;
      /** Format: decimal */
      final_price?: string | null;
    };
    UpdateTimesheet: {
      items?: ({
          id?: number;
          title?: string | null;
          description?: string | null;
          timesheet?: number | null;
          timesheet_update?: number | null;
        })[];
      working_hours?: ({
          id?: number;
          /** Format: date-time */
          start?: string | null;
          /** Format: date-time */
          end?: string | null;
          timesheet?: number | null;
          timesheet_update?: number | null;
        })[];
      message?: string;
      description?: string | null;
      /** Format: decimal */
      pay?: string | null;
      status?: string | null;
    };
    EditMarketplaceProduct: {
      id?: number;
      product: {
        id?: number;
        name?: string;
        description?: string | null;
        image?: string | null;
        shared?: boolean;
      };
      /** Format: decimal */
      price: string;
      quantity: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      greenhouse?: number | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  listGreenhouses: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Greenhouse"][];
          };
        };
      };
    };
  };
  createGreenhouse: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Greenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["Greenhouse"];
        "multipart/form-data": components["schemas"]["Greenhouse"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Greenhouse"];
        };
      };
    };
  };
  myGreenhousesGreenhouse: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Greenhouse"];
        };
      };
    };
  };
  retrieveGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Greenhouse"];
        };
      };
    };
  };
  updateGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Greenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["Greenhouse"];
        "multipart/form-data": components["schemas"]["Greenhouse"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Greenhouse"];
        };
      };
    };
  };
  destroyGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Greenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["Greenhouse"];
        "multipart/form-data": components["schemas"]["Greenhouse"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Greenhouse"];
        };
      };
    };
  };
  getTimesheetsGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Timesheet"];
        };
      };
    };
  };
  listFlowerbeds: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Flowerbed"][];
          };
        };
      };
    };
  };
  createFlowerbed: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flowerbed"];
        "application/x-www-form-urlencoded": components["schemas"]["Flowerbed"];
        "multipart/form-data": components["schemas"]["Flowerbed"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Flowerbed"];
        };
      };
    };
  };
  myFlowerbedsFlowerbed: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Flowerbed"];
        };
      };
    };
  };
  retrieveFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Flowerbed"];
        };
      };
    };
  };
  updateFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flowerbed"];
        "application/x-www-form-urlencoded": components["schemas"]["Flowerbed"];
        "multipart/form-data": components["schemas"]["Flowerbed"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Flowerbed"];
        };
      };
    };
  };
  destroyFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flowerbed"];
        "application/x-www-form-urlencoded": components["schemas"]["Flowerbed"];
        "multipart/form-data": components["schemas"]["Flowerbed"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Flowerbed"];
        };
      };
    };
  };
  statusFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FlowerbedStatus"];
        };
      };
    };
  };
  listOrders: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Order"][];
          };
        };
      };
    };
  };
  createOrder: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Order"];
        "application/x-www-form-urlencoded": components["schemas"]["Order"];
        "multipart/form-data": components["schemas"]["Order"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  retrieveOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  updateOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Order"];
        "application/x-www-form-urlencoded": components["schemas"]["Order"];
        "multipart/form-data": components["schemas"]["Order"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  destroyOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Order"];
        "application/x-www-form-urlencoded": components["schemas"]["Order"];
        "multipart/form-data": components["schemas"]["Order"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  getPaymentOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
    };
  };
  getPickupOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetPickupLocations"];
        };
      };
    };
  };
  listUsers: {
    responses: {
      200: {
        content: {
          "application/json": unknown[];
        };
      };
    };
  };
  /** @description API endpoint that allows users to be viewed or edited. */
  retrieveUser: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"];
        };
      };
    };
  };
  listTimesheets: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["TimesheetWithGreenhouse"][];
          };
        };
      };
    };
  };
  createTimesheet: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TimesheetWithGreenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["TimesheetWithGreenhouse"];
        "multipart/form-data": components["schemas"]["TimesheetWithGreenhouse"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TimesheetWithGreenhouse"];
        };
      };
    };
  };
  retrieveTimesheet: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this timesheet. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TimesheetWithGreenhouse"];
        };
      };
    };
  };
  updateTimesheet: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this timesheet. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TimesheetWithGreenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["TimesheetWithGreenhouse"];
        "multipart/form-data": components["schemas"]["TimesheetWithGreenhouse"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TimesheetWithGreenhouse"];
        };
      };
    };
  };
  destroyTimesheet: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this timesheet. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateTimesheet: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this timesheet. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TimesheetWithGreenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["TimesheetWithGreenhouse"];
        "multipart/form-data": components["schemas"]["TimesheetWithGreenhouse"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TimesheetWithGreenhouse"];
        };
      };
    };
  };
  listProducts: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Product"][];
          };
        };
      };
    };
  };
  createProduct: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Product"];
        "application/x-www-form-urlencoded": components["schemas"]["Product"];
        "multipart/form-data": components["schemas"]["Product"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  retrieveProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  updateProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Product"];
        "application/x-www-form-urlencoded": components["schemas"]["Product"];
        "multipart/form-data": components["schemas"]["Product"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  destroyProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Product"];
        "application/x-www-form-urlencoded": components["schemas"]["Product"];
        "multipart/form-data": components["schemas"]["Product"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  listingsProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProductDetailMarketplaceProduct"];
        };
      };
    };
  };
  minmaxProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProductMinMax"];
        };
      };
    };
  };
  listSharedProducts: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["SharedProduct"][];
          };
        };
      };
    };
  };
  createSharedProduct: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SharedProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedProduct"];
        "multipart/form-data": components["schemas"]["SharedProduct"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SharedProduct"];
        };
      };
    };
  };
  retrieveSharedProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this shared product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedProduct"];
        };
      };
    };
  };
  updateSharedProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this shared product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SharedProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedProduct"];
        "multipart/form-data": components["schemas"]["SharedProduct"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedProduct"];
        };
      };
    };
  };
  destroySharedProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this shared product. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateSharedProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this shared product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SharedProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedProduct"];
        "multipart/form-data": components["schemas"]["SharedProduct"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedProduct"];
        };
      };
    };
  };
  listMarketplaceProducts: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
      path: {
        /** @description A unique integer value identifying this marketplace product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["MarketplaceProduct"][];
          };
        };
      };
    };
  };
  retrieveMarketplaceProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this marketplace product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MarketplaceDetailProduct"];
        };
      };
    };
  };
  listNewsletterImages: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["NewsletterImage"][];
          };
        };
      };
    };
  };
  createNewsletterImage: {
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["NewsletterImage"];
        "application/x-www-form-urlencoded": components["schemas"]["NewsletterImage"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["NewsletterImage"];
        };
      };
    };
  };
  retrieveNewsletterImage: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this newsletter image. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NewsletterImage"];
        };
      };
    };
  };
  updateNewsletterImage: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this newsletter image. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["NewsletterImage"];
        "application/x-www-form-urlencoded": components["schemas"]["NewsletterImage"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NewsletterImage"];
        };
      };
    };
  };
  destroyNewsletterImage: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this newsletter image. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateNewsletterImage: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this newsletter image. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["NewsletterImage"];
        "application/x-www-form-urlencoded": components["schemas"]["NewsletterImage"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NewsletterImage"];
        };
      };
    };
  };
  listUnsubscribes: {
    responses: {
      200: {
        content: {
          "application/json": unknown[];
        };
      };
    };
  };
  listSubscriberCounts: {
    responses: {
      200: {
        content: {
          "application/json": unknown[];
        };
      };
    };
  };
  createGreenhouseGreenhouse: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateGreenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateGreenhouse"];
        "multipart/form-data": components["schemas"]["CreateGreenhouse"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateGreenhouse"];
        };
      };
    };
  };
  rentFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateRent"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateRent"];
        "multipart/form-data": components["schemas"]["CreateRent"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateRent"];
        };
      };
    };
  };
  /** @description API endpoint that allows users to be viewed or edited. */
  editUser: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this user. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EditUser"];
        "application/x-www-form-urlencoded": components["schemas"]["EditUser"];
        "multipart/form-data": components["schemas"]["EditUser"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EditUser"];
        };
      };
    };
  };
  /** @description API endpoint that allows users to be viewed or edited. */
  setActivityUser: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this user. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SetUserActivity"];
        "application/x-www-form-urlencoded": components["schemas"]["SetUserActivity"];
        "multipart/form-data": components["schemas"]["SetUserActivity"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SetUserActivity"];
        };
      };
    };
  };
  createTimesheetTimesheet: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTimesheet"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateTimesheet"];
        "multipart/form-data": components["schemas"]["CreateTimesheet"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateTimesheet"];
        };
      };
    };
  };
  /** @description An Api View which provides a method to verify that a token is valid */
  createResetToken: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ResetToken"];
        "application/x-www-form-urlencoded": components["schemas"]["ResetToken"];
        "multipart/form-data": components["schemas"]["ResetToken"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ResetToken"];
        };
      };
    };
  };
  /** @description An Api View which provides a method to reset a password based on a unique token */
  createPasswordToken: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PasswordToken"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordToken"];
        "multipart/form-data": components["schemas"]["PasswordToken"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PasswordToken"];
        };
      };
    };
  };
  /**
   * @description An Api View which provides a method to request a password reset token based on an e-mail address
   *
   * Sends a signal reset_password_token_created when a reset token was created
   */
  createEmail: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Email"];
        "application/x-www-form-urlencoded": components["schemas"]["Email"];
        "multipart/form-data": components["schemas"]["Email"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Email"];
        };
      };
    };
  };
  createLogin: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createRegister: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createLogout: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createMarketplaceProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this marketplace product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateGreenhouseProductFromCustomProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateGreenhouseProductFromCustomProduct"];
        "multipart/form-data": components["schemas"]["CreateGreenhouseProductFromCustomProduct"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateGreenhouseProductFromCustomProduct"];
        };
      };
    };
  };
  createProductOrders: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateProductOrderInput"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateProductOrderInput"];
        "multipart/form-data": components["schemas"]["CreateProductOrderInput"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateProductOrderInput"];
        };
      };
    };
  };
  createGetPickupOptionsFromCartItems: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createSetPrimaryGreenhouse: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createSendNewsletter: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  editGreenhouseGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EditGreenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["EditGreenhouse"];
        "multipart/form-data": components["schemas"]["EditGreenhouse"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EditGreenhouse"];
        };
      };
    };
  };
  setCaretakerGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SetCaretaker"];
        "application/x-www-form-urlencoded": components["schemas"]["SetCaretaker"];
        "multipart/form-data": components["schemas"]["SetCaretaker"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SetCaretaker"];
        };
      };
    };
  };
  setOwnerGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SetOwner"];
        "application/x-www-form-urlencoded": components["schemas"]["SetOwner"];
        "multipart/form-data": components["schemas"]["SetOwner"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SetOwner"];
        };
      };
    };
  };
  unsetCaretakerGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Empty"];
        "application/x-www-form-urlencoded": components["schemas"]["Empty"];
        "multipart/form-data": components["schemas"]["Empty"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Empty"];
        };
      };
    };
  };
  unsetOwnerGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Empty"];
        "application/x-www-form-urlencoded": components["schemas"]["Empty"];
        "multipart/form-data": components["schemas"]["Empty"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Empty"];
        };
      };
    };
  };
  extendRentFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateRent"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateRent"];
        "multipart/form-data": components["schemas"]["CreateRent"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CreateRent"];
        };
      };
    };
  };
  cancelOrderOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Empty"];
        "application/x-www-form-urlencoded": components["schemas"]["Empty"];
        "multipart/form-data": components["schemas"]["Empty"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Empty"];
        };
      };
    };
  };
  editOrderOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EditOrder"];
        "application/x-www-form-urlencoded": components["schemas"]["EditOrder"];
        "multipart/form-data": components["schemas"]["EditOrder"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EditOrder"];
        };
      };
    };
  };
  updateTimesheetTimesheet: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this timesheet. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateTimesheet"];
        "application/x-www-form-urlencoded": components["schemas"]["UpdateTimesheet"];
        "multipart/form-data": components["schemas"]["UpdateTimesheet"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateTimesheet"];
        };
      };
    };
  };
  updateMarketplaceProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this marketplace product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EditMarketplaceProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["EditMarketplaceProduct"];
        "multipart/form-data": components["schemas"]["EditMarketplaceProduct"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EditMarketplaceProduct"];
        };
      };
    };
  };
  partialUpdateMarketplaceProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this marketplace product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EditMarketplaceProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["EditMarketplaceProduct"];
        "multipart/form-data": components["schemas"]["EditMarketplaceProduct"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EditMarketplaceProduct"];
        };
      };
    };
  };
  updateEditGreenhouseProductInventory: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  destroyMarketplaceProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this marketplace product. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
}
