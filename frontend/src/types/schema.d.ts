/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/users/": {
    /** @description API endpoint that allows users to be viewed or edited. */
    get: operations["listUsers"];
  };
  "/api/users/me/": {
    /** @description API endpoint that allows users to be viewed or edited. */
    get: operations["meUser"];
  };
  "/api/users/{id}/": {
    /** @description API endpoint that allows users to be viewed or edited. */
    get: operations["retrieveUser"];
  };
  "/api/profiles/": {
    /** @description API endpoint that allows groups to be viewed or edited. */
    get: operations["listProfiles"];
    /** @description API endpoint that allows groups to be viewed or edited. */
    post: operations["createProfile"];
  };
  "/api/profiles/{id}/": {
    /** @description API endpoint that allows groups to be viewed or edited. */
    get: operations["retrieveProfile"];
    /** @description API endpoint that allows groups to be viewed or edited. */
    put: operations["updateProfile"];
    /** @description API endpoint that allows groups to be viewed or edited. */
    delete: operations["destroyProfile"];
    /** @description API endpoint that allows groups to be viewed or edited. */
    patch: operations["partialUpdateProfile"];
  };
  "/api/groups/": {
    /** @description API endpoint that allows groups to be viewed or edited. */
    get: operations["listGroups"];
    /** @description API endpoint that allows groups to be viewed or edited. */
    post: operations["createGroup"];
  };
  "/api/groups/{id}/": {
    /** @description API endpoint that allows groups to be viewed or edited. */
    get: operations["retrieveGroup"];
    /** @description API endpoint that allows groups to be viewed or edited. */
    put: operations["updateGroup"];
    /** @description API endpoint that allows groups to be viewed or edited. */
    delete: operations["destroyGroup"];
    /** @description API endpoint that allows groups to be viewed or edited. */
    patch: operations["partialUpdateGroup"];
  };
  "/api/books/": {
    get: operations["listBooks"];
    post: operations["createBook"];
  };
  "/api/books/{id}/": {
    get: operations["retrieveBook"];
    put: operations["updateBook"];
    delete: operations["destroyBook"];
    patch: operations["partialUpdateBook"];
  };
  "/api/greenhouses/": {
    get: operations["listGreenhouses"];
    post: operations["createGreenhouse"];
  };
  "/api/greenhouses/{id}/": {
    get: operations["retrieveGreenhouse"];
    put: operations["updateGreenhouse"];
    delete: operations["destroyGreenhouse"];
    patch: operations["partialUpdateGreenhouse"];
  };
  "/api/flowerbeds/": {
    get: operations["listFlowerbeds"];
    post: operations["createFlowerbed"];
  };
  "/api/flowerbeds/{id}/": {
    get: operations["retrieveFlowerbed"];
    put: operations["updateFlowerbed"];
    delete: operations["destroyFlowerbed"];
    patch: operations["partialUpdateFlowerbed"];
  };
  "/api/flowerbeds/{id}/status/": {
    get: operations["statusFlowerbed"];
  };
  "/api/orders/": {
    get: operations["listOrders"];
    post: operations["createOrder"];
  };
  "/api/orders/{id}/": {
    get: operations["retrieveOrder"];
    put: operations["updateOrder"];
    delete: operations["destroyOrder"];
    patch: operations["partialUpdateOrder"];
  };
  "/api/orders/{id}/get_payment/": {
    get: operations["getPaymentOrder"];
  };
  "/api/orders/{id}/get_pickup/": {
    get: operations["getPickupOrder"];
  };
  "/api/auth/profile": {
    get: operations["listUsers"];
  };
  "/api/marketplace/products/": {
    get: operations["listProducts"];
    post: operations["createProduct"];
  };
  "/api/marketplace/products/{id}/": {
    get: operations["retrieveProduct"];
    put: operations["updateProduct"];
    delete: operations["destroyProduct"];
    patch: operations["partialUpdateProduct"];
  };
  "/api/marketplace/products/{id}/listings/": {
    get: operations["listingsProduct"];
  };
  "/api/marketplace/products/{id}/minmax/": {
    get: operations["minmaxProduct"];
  };
  "/api/marketplace/shared-products/": {
    get: operations["listSharedProducts"];
    post: operations["createSharedProduct"];
  };
  "/api/marketplace/shared-products/{id}/": {
    get: operations["retrieveSharedProduct"];
    put: operations["updateSharedProduct"];
    delete: operations["destroySharedProduct"];
    patch: operations["partialUpdateSharedProduct"];
  };
  "/api/marketplace/greenhouses/{id}/products/": {
    get: operations["listMarketplaceProducts"];
  };
  "/api/marketplace/product/{id}/": {
    get: operations["retrieveMarketplaceProduct"];
  };
  "/api/flowerbeds/{id}/rent/": {
    post: operations["rentFlowerbed"];
  };
  "/api/auth/login": {
    post: operations["createLogin"];
  };
  "/api/auth/register": {
    post: operations["createRegister"];
  };
  "/api/auth/logout": {
    post: operations["createLogout"];
  };
  "/api/marketplace/greenhouses/{id}/products/from-shared/": {
    post: operations["createMarketplaceProduct"];
  };
  "/api/marketplace/greenhouses/{id}/products/from-custom/": {
    post: operations["createMarketplaceProduct"];
  };
  "/api/marketplace/order/": {
    post: operations["createProductOrders"];
  };
  "/api/marketplace/pickup-options/": {
    post: operations["createGetPickupOptionsFromCartItems"];
  };
  "/api/marketplace/set-primary-greenhouse/": {
    post: operations["createSetPrimaryGreenhouse"];
  };
  "/api/greenhouses/{id}/edit_greenhouse/": {
    put: operations["editGreenhouseGreenhouse"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      first_name?: string;
      last_name?: string;
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      /** Format: email */
      email?: string;
      groups?: readonly string[];
      profile?: {
        readonly id?: number;
        readonly primary_greenhouseId?: number | null;
        readonly user: number;
      };
    };
    Profile: {
      id?: number;
      primary_greenhouseId?: number | null;
      user: number;
    };
    Group: {
      url?: string;
      name: string;
    };
    Book: {
      id?: number;
      title: string;
      author: string;
      profile?: number | null;
    };
    Greenhouse: {
      id?: number;
      greenhouse_address: {
        id?: number;
        country?: string | null;
        state?: string | null;
        city?: string | null;
        city_part?: string | null;
        street?: string | null;
        zipcode?: string | null;
        latitude?: string | null;
        longitude?: string | null;
      };
      flowerbeds?: readonly ({
          id?: number;
          rents?: readonly ({
              id?: number;
              /** Format: date-time */
              rented_from?: string | null;
              /** Format: date-time */
              rented_to?: string | null;
              flowerbed?: number | null;
              user?: number | null;
            })[];
          currentRent?: string;
          greenhouse: {
            id?: number;
            title?: string | null;
            description?: string | null;
            greenhouse_address: {
              id?: number;
              country?: string | null;
              state?: string | null;
              city?: string | null;
              city_part?: string | null;
              street?: string | null;
              zipcode?: string | null;
              latitude?: string | null;
              longitude?: string | null;
            };
          };
          name?: string | null;
          disabled?: boolean | null;
          dimension_width?: number;
          dimension_height?: number;
          idealPlants?: string | null;
          tools?: string | null;
          /** Format: decimal */
          pricePerDay?: string;
        })[];
      greenhouse_business_hours: ({
          id?: number;
          greenhouse_business_hour_periods: ({
              id?: number;
              open: string;
              close: string;
              business_hour?: number | null;
            })[];
          day: number;
          greenhouse?: number | null;
        })[];
      available_flowerbeds?: string;
      title?: string | null;
      description?: string | null;
      rules?: string | null;
      published?: boolean;
      bank_account_number?: string | null;
      owner: number;
      caretaker?: number | null;
    };
    Flowerbed: {
      id?: number;
      rents?: readonly ({
          id?: number;
          /** Format: date-time */
          rented_from?: string | null;
          /** Format: date-time */
          rented_to?: string | null;
          flowerbed?: number | null;
          user?: number | null;
        })[];
      currentRent?: string;
      greenhouse: {
        id?: number;
        title?: string | null;
        description?: string | null;
        greenhouse_address: {
          id?: number;
          country?: string | null;
          state?: string | null;
          city?: string | null;
          city_part?: string | null;
          street?: string | null;
          zipcode?: string | null;
          latitude?: string | null;
          longitude?: string | null;
        };
      };
      name?: string | null;
      disabled?: boolean | null;
      dimension_width?: number;
      dimension_height?: number;
      idealPlants?: string | null;
      tools?: string | null;
      /** Format: decimal */
      pricePerDay?: string;
    };
    FlowerbedStatus: {
      /** @enum {string} */
      status: "rented" | "free";
    };
    Order: {
      id?: number;
      type?: string;
      status?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: decimal */
      final_price?: string | null;
      user?: number | null;
      discounts?: number[];
    };
    Payment: {
      receiver: string;
      vs: number;
      /** Format: decimal */
      amount: string;
    };
    GetPickupLocations: {
      greenhouse: {
        id?: number;
        greenhouse_business_hours: ({
            id?: number;
            greenhouse_business_hour_periods: ({
                id?: number;
                open: string;
                close: string;
                business_hour?: number | null;
              })[];
            day: number;
            greenhouse?: number | null;
          })[];
        greenhouse_address: {
          id?: number;
          country?: string | null;
          state?: string | null;
          city?: string | null;
          city_part?: string | null;
          street?: string | null;
          zipcode?: string | null;
          latitude?: string | null;
          longitude?: string | null;
        };
        title?: string | null;
        description?: string | null;
        rules?: string | null;
        published?: boolean;
        bank_account_number?: string | null;
        owner: number;
        caretaker?: number | null;
      };
      items: ({
          id?: number;
          productOrder: number;
          quantity?: number | null;
          /** Format: decimal */
          price?: string | null;
          greenhouseName?: string | null;
          greenhouseId?: number | null;
          productName?: string | null;
          productImage?: string | null;
        })[];
    };
    Product: {
      id?: number;
      name?: string;
      description?: string | null;
      image?: string | null;
      shared?: boolean;
    };
    ProductDetailMarketplaceProduct: {
      id?: number;
      greenhouse: {
        id?: number;
        title?: string | null;
        description?: string | null;
        rules?: string | null;
        published?: boolean;
        bank_account_number?: string | null;
        owner: number;
        greenhouse_address?: number | null;
        caretaker?: number | null;
      };
      /** Format: decimal */
      price: string;
      quantity: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      product?: number | null;
    };
    ProductMinMax: {
      id: number;
      name: string;
      description: string;
      image: string;
      min: number;
      max: number;
      totalQuantity: number;
      totalGreenhouses: number;
    };
    SharedProduct: {
      id?: number;
      name?: string;
      description?: string | null;
      image?: string | null;
      shared?: boolean;
    };
    MarketplaceProduct: {
      id?: number;
      product: {
        id?: number;
        name?: string;
        description?: string | null;
        image?: string | null;
        shared?: boolean;
      };
      /** Format: decimal */
      price: string;
      quantity: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      greenhouse?: number | null;
    };
    MarketplaceDetailProduct: {
      id?: number;
      product: {
        id?: number;
        name?: string;
        description?: string | null;
        image?: string | null;
        shared?: boolean;
      };
      greenhouse: {
        id?: number;
        title?: string | null;
        description?: string | null;
        rules?: string | null;
        published?: boolean;
        bank_account_number?: string | null;
        owner: number;
        greenhouse_address?: number | null;
        caretaker?: number | null;
      };
      /** Format: decimal */
      price: string;
      quantity: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    CreateRent: {
      /** Format: date-time */
      rented_from: string | null;
      /** Format: date-time */
      rented_to: string | null;
    };
    CreateGreenhouseProductFromSharedProduct: {
      product: number;
      /** Format: decimal */
      price: string;
      quantity: number;
    };
    CreateGreenhouseProductFromCustomProduct: {
      product: {
        id?: number;
        name?: string;
        description?: string | null;
        image?: string | null;
        shared?: boolean;
      };
      /** Format: decimal */
      price: string;
      quantity: number;
    };
    CreateProductOrderInput: {
      items: {
          marketplaceProduct: number;
          quantity: number;
        }[];
    };
    EditGreenhouse: {
      title: string | null;
      description: string | null;
      published: boolean;
      greenhouse_address?: {
        id?: number;
        country?: string | null;
        state?: string | null;
        city?: string | null;
        city_part?: string | null;
        street?: string | null;
        zipcode?: string | null;
        latitude?: string | null;
        longitude?: string | null;
      };
      greenhouse_business_hours?: ({
          id?: number;
          greenhouse_business_hour_periods: ({
              id?: number;
              open: string;
              close: string;
              business_hour?: number | null;
            })[];
          day: number;
          greenhouse?: number | null;
        })[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  listUsers: {
    responses: {
      200: {
        content: {
          "application/json": unknown[];
        };
      };
    };
  };
  /** @description API endpoint that allows users to be viewed or edited. */
  meUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** @description API endpoint that allows users to be viewed or edited. */
  retrieveUser: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  listProfiles: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Profile"][];
          };
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  createProfile: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Profile"];
        "application/x-www-form-urlencoded": components["schemas"]["Profile"];
        "multipart/form-data": components["schemas"]["Profile"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  retrieveProfile: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this profile. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  updateProfile: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this profile. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Profile"];
        "application/x-www-form-urlencoded": components["schemas"]["Profile"];
        "multipart/form-data": components["schemas"]["Profile"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  destroyProfile: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this profile. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  partialUpdateProfile: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this profile. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Profile"];
        "application/x-www-form-urlencoded": components["schemas"]["Profile"];
        "multipart/form-data": components["schemas"]["Profile"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  listGroups: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Group"][];
          };
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  createGroup: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Group"];
        "application/x-www-form-urlencoded": components["schemas"]["Group"];
        "multipart/form-data": components["schemas"]["Group"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  retrieveGroup: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this group. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  updateGroup: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this group. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Group"];
        "application/x-www-form-urlencoded": components["schemas"]["Group"];
        "multipart/form-data": components["schemas"]["Group"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  destroyGroup: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this group. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /** @description API endpoint that allows groups to be viewed or edited. */
  partialUpdateGroup: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this group. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Group"];
        "application/x-www-form-urlencoded": components["schemas"]["Group"];
        "multipart/form-data": components["schemas"]["Group"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  listBooks: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description title */
        title?: string;
        /** @description author */
        author?: string;
        /** @description A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Book"][];
          };
        };
      };
    };
  };
  createBook: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Book"];
        "application/x-www-form-urlencoded": components["schemas"]["Book"];
        "multipart/form-data": components["schemas"]["Book"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Book"];
        };
      };
    };
  };
  retrieveBook: {
    parameters: {
      query?: {
        /** @description title */
        title?: string;
        /** @description author */
        author?: string;
        /** @description A search term. */
        search?: string;
      };
      path: {
        /** @description A unique integer value identifying this book. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Book"];
        };
      };
    };
  };
  updateBook: {
    parameters: {
      query?: {
        /** @description title */
        title?: string;
        /** @description author */
        author?: string;
        /** @description A search term. */
        search?: string;
      };
      path: {
        /** @description A unique integer value identifying this book. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Book"];
        "application/x-www-form-urlencoded": components["schemas"]["Book"];
        "multipart/form-data": components["schemas"]["Book"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Book"];
        };
      };
    };
  };
  destroyBook: {
    parameters: {
      query?: {
        /** @description title */
        title?: string;
        /** @description author */
        author?: string;
        /** @description A search term. */
        search?: string;
      };
      path: {
        /** @description A unique integer value identifying this book. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateBook: {
    parameters: {
      query?: {
        /** @description title */
        title?: string;
        /** @description author */
        author?: string;
        /** @description A search term. */
        search?: string;
      };
      path: {
        /** @description A unique integer value identifying this book. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Book"];
        "application/x-www-form-urlencoded": components["schemas"]["Book"];
        "multipart/form-data": components["schemas"]["Book"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Book"];
        };
      };
    };
  };
  listGreenhouses: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Greenhouse"][];
          };
        };
      };
    };
  };
  createGreenhouse: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Greenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["Greenhouse"];
        "multipart/form-data": components["schemas"]["Greenhouse"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Greenhouse"];
        };
      };
    };
  };
  retrieveGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Greenhouse"];
        };
      };
    };
  };
  updateGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Greenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["Greenhouse"];
        "multipart/form-data": components["schemas"]["Greenhouse"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Greenhouse"];
        };
      };
    };
  };
  destroyGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Greenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["Greenhouse"];
        "multipart/form-data": components["schemas"]["Greenhouse"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Greenhouse"];
        };
      };
    };
  };
  listFlowerbeds: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Flowerbed"][];
          };
        };
      };
    };
  };
  createFlowerbed: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flowerbed"];
        "application/x-www-form-urlencoded": components["schemas"]["Flowerbed"];
        "multipart/form-data": components["schemas"]["Flowerbed"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Flowerbed"];
        };
      };
    };
  };
  retrieveFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Flowerbed"];
        };
      };
    };
  };
  updateFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flowerbed"];
        "application/x-www-form-urlencoded": components["schemas"]["Flowerbed"];
        "multipart/form-data": components["schemas"]["Flowerbed"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Flowerbed"];
        };
      };
    };
  };
  destroyFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flowerbed"];
        "application/x-www-form-urlencoded": components["schemas"]["Flowerbed"];
        "multipart/form-data": components["schemas"]["Flowerbed"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Flowerbed"];
        };
      };
    };
  };
  statusFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FlowerbedStatus"];
        };
      };
    };
  };
  listOrders: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Order"][];
          };
        };
      };
    };
  };
  createOrder: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Order"];
        "application/x-www-form-urlencoded": components["schemas"]["Order"];
        "multipart/form-data": components["schemas"]["Order"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  retrieveOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  updateOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Order"];
        "application/x-www-form-urlencoded": components["schemas"]["Order"];
        "multipart/form-data": components["schemas"]["Order"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  destroyOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Order"];
        "application/x-www-form-urlencoded": components["schemas"]["Order"];
        "multipart/form-data": components["schemas"]["Order"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  getPaymentOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
    };
  };
  getPickupOrder: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this order. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetPickupLocations"];
        };
      };
    };
  };
  listProducts: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Product"][];
          };
        };
      };
    };
  };
  createProduct: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Product"];
        "application/x-www-form-urlencoded": components["schemas"]["Product"];
        "multipart/form-data": components["schemas"]["Product"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  retrieveProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  updateProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Product"];
        "application/x-www-form-urlencoded": components["schemas"]["Product"];
        "multipart/form-data": components["schemas"]["Product"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  destroyProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Product"];
        "application/x-www-form-urlencoded": components["schemas"]["Product"];
        "multipart/form-data": components["schemas"]["Product"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  listingsProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProductDetailMarketplaceProduct"];
        };
      };
    };
  };
  minmaxProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProductMinMax"];
        };
      };
    };
  };
  listSharedProducts: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["SharedProduct"][];
          };
        };
      };
    };
  };
  createSharedProduct: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SharedProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedProduct"];
        "multipart/form-data": components["schemas"]["SharedProduct"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SharedProduct"];
        };
      };
    };
  };
  retrieveSharedProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this shared product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedProduct"];
        };
      };
    };
  };
  updateSharedProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this shared product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SharedProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedProduct"];
        "multipart/form-data": components["schemas"]["SharedProduct"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedProduct"];
        };
      };
    };
  };
  destroySharedProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this shared product. */
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  partialUpdateSharedProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this shared product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SharedProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedProduct"];
        "multipart/form-data": components["schemas"]["SharedProduct"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedProduct"];
        };
      };
    };
  };
  listMarketplaceProducts: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
      path: {
        /** @description A unique integer value identifying this marketplace product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["MarketplaceProduct"][];
          };
        };
      };
    };
  };
  retrieveMarketplaceProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this marketplace product. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MarketplaceDetailProduct"];
        };
      };
    };
  };
  rentFlowerbed: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this flowerbed. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateRent"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateRent"];
        "multipart/form-data": components["schemas"]["CreateRent"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateRent"];
        };
      };
    };
  };
  createLogin: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createRegister: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createLogout: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createMarketplaceProduct: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this marketplace product. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateGreenhouseProductFromCustomProduct"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateGreenhouseProductFromCustomProduct"];
        "multipart/form-data": components["schemas"]["CreateGreenhouseProductFromCustomProduct"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateGreenhouseProductFromCustomProduct"];
        };
      };
    };
  };
  createProductOrders: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateProductOrderInput"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateProductOrderInput"];
        "multipart/form-data": components["schemas"]["CreateProductOrderInput"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateProductOrderInput"];
        };
      };
    };
  };
  createGetPickupOptionsFromCartItems: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createSetPrimaryGreenhouse: {
    requestBody?: {
      content: {
        "application/json": unknown;
        "application/x-www-form-urlencoded": unknown;
        "multipart/form-data": unknown;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  editGreenhouseGreenhouse: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this greenhouse. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EditGreenhouse"];
        "application/x-www-form-urlencoded": components["schemas"]["EditGreenhouse"];
        "multipart/form-data": components["schemas"]["EditGreenhouse"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EditGreenhouse"];
        };
      };
    };
  };
}
